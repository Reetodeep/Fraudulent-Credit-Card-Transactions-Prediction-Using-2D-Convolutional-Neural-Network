import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import BatchNormalization,Dropout,Dense,Flatten,Conv1D
from tensorflow.keras.optimizers import Adam
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
df = pd.read_csv('../input/creditcardfraud/creditcard.csv')
df.head()
df.shape
df.info()
df.Class.unique()
df.Class.value_counts()
nf = df[df.Class==0]
f = df[df.Class==1]
nf = nf.sample(738)
data = f.append(nf,ignore_index=True)
data.shape
X = data.drop(['Class'],axis=1)
y=data['Class']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y)
X_train.shape,X_test.shape
scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)
y_train=y_train.to_numpy()
y_test=y_test.to_numpy()
X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)
print("X_train:", X_train.shape)
print("X_test:", X_test.shape)

CNN MODEL

model=Sequential()
model.add(Conv1D(32,2,activation='relu',input_shape=X_train[0].shape))
model.add(BatchNormalization())
model.add(Dropout(0.2))
model.add(Conv1D(64,2,activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1,activation='sigmoid'))
model.summary()
model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=['accuracy'])
history = model.fit(X_train,y_train,epochs=30,validation_data=(X_test,y_test))
plt.plot(history.history['accuracy'], color='r', linewidth=2.0)
plt.plot(history.history['val_accuracy'], linewidth=2.0)
plt.title('Accuracy Curve')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train','Validation'],loc='center right')
plt.show()
plt.plot(history.history['loss'], color='r', linewidth=2.0)
plt.plot(history.history['val_loss'], linewidth=2.0)
plt.title('Loss Curve')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train','Validation'],loc='center right')
plt.show()
model_name="credit_card.h5"
model.save(model_name)
print('Saved trained model is %s' %model_name)
scores = model.evaluate(X_test, y_test, verbose=1)
predictions = model.predict (X_test, verbose=1)
y_true, y_pred = [],[]
for idx, prediction in enumerate(predictions):
y_true.append([np.argmax(y_test[idx])])
y_pred.append([np.argmax(prediction)])
print(classification_report(y_pred, y_true))
print (confusion_matrix(y_pred, y_true))
plt.xlabel('predicted label')
plt.ylabel('true label')
plt.tight_layout()
plt.show()
